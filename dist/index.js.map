{"version":3,"file":"index.js","sources":["../lib/AmazonMwsRequest.js","../lib/EnumType.js","../lib/ComplexListType.js","../lib/AmazonMwsClient.js","../lib/FulfillmentRequest.js","../lib/OrdersRequest.js","../lib/SellersRequest.js","../lib/FeedsRequest.js","../lib/ProductsRequest.js","../lib/ReportsRequest.js","../lib/mws.js"],"sourcesContent":["/**\n * Constructor for general MWS request objects, wrapped by api submodules to keep\n * things DRY, yet familiar despite whichever api is being implemented.\n *\n * @param {Object} options Settings to apply to new request instance.\n */\n\nexport default class AmazonMwsRequest {\n  constructor({\n    path = '/',\n    version = '2009-01-01',\n    legacy = false,\n    upload,\n    action = 'GetServiceStatus',\n    params = {},\n  }) {\n    this.api = {\n      path,\n      version,\n      legacy,\n      upload,\n    };\n    this.action = action;\n    this.params = { ...params };\n    this.paramsMap = {};\n\n    const paramNames = Object.keys(this.params);\n    if (paramNames.length > 0) {\n      paramNames.forEach((paramName) => {\n        const realName = this.params[paramName].name;\n        if (paramName !== this.params[paramName].name) {\n          this.paramsMap[paramName] = realName;\n          this.params[realName] = this.params[paramName];\n          delete this.params[paramName];\n        }\n      });\n    }\n  }\n\n  setMultiple(conf) {\n    Object.keys(conf).forEach((key) => {\n      this.set(key, conf[key]);\n    });\n\n    return this;\n  }\n\n  /**\n   * Handles the casting, renaming, and setting of individual request params.\n   *\n   * @param {String} param Key of parameter (not ALWAYS the same as the param name!)\n   * @param {Mixed} value Value to assign to parameter\n   * @return {Object} Current instance to allow function chaining\n   */\n  set(param, value) {\n    if (param instanceof Object && (value === null || value === undefined)) {\n      return this.setMultiple(param);\n    } else if (value !== null && value !== undefined) {\n      let paramName = param;\n\n      if (Object.prototype.hasOwnProperty.call(this.paramsMap, paramName)) {\n        paramName = this.paramsMap[paramName];\n      }\n\n      const parameter = this.params[paramName];\n      parameter.value = {};\n\n      // Lists need to be sequentially numbered and we take care of that here\n      if (parameter.list) {\n        this.params[paramName] = AmazonMwsRequest.getListParameter(parameter, value);\n      } else {\n        this.params[paramName] = AmazonMwsRequest.setValue(parameter, parameter.name, value);\n      }\n    }\n    return this;\n  }\n\n\n  static getListParameter(parameter, value) {\n    let workingParameter = { ...parameter };\n\n    let i = 0;\n    if (typeof value === 'string' || typeof value === 'number') {\n      workingParameter = AmazonMwsRequest.setListValue(parameter, `${parameter.name}.1`, value);\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        for (i = value.length - 1; i >= 0; i -= 1) {\n          workingParameter = AmazonMwsRequest.setListValue(\n            parameter,\n            `${parameter.name}.${i + 1}`,\n            value[i],\n          );\n        }\n      } else {\n        Object.keys(value).forEach((key) => {\n          workingParameter = AmazonMwsRequest.setListValue(\n            parameter,\n            `${parameter.name}.${i += 1}`,\n            value[key],\n          );\n        });\n      }\n    }\n\n    return workingParameter;\n  }\n\n  // Handles the actual setting based on type\n  static setListValue(parameter, name, value) {\n    const workingParameter = { ...parameter };\n    let normalizedValue = value;\n\n    if (parameter.type === 'Timestamp') {\n      normalizedValue = value.toISOString();\n    } else if (parameter.type === 'Boolean') {\n      normalizedValue = value ? 'true' : 'false';\n    }\n\n    workingParameter.value[name] = normalizedValue;\n\n    return workingParameter;\n  }\n\n  // Handles the actual setting based on type\n  static setValue(parameter, name, value) {\n    if (parameter.type === 'Timestamp') {\n      return { ...parameter, ...{ value: value.toISOString() } };\n    } else if (parameter.type === 'Boolean') {\n      return { ...parameter, ...{ value: value ? 'true' : 'false' } };\n    }\n\n    return { ...parameter, ...{ value } };\n  }\n\n  /**\n   * Builds a query object and checks for required parameters.\n   *\n   * @return {Object} KvP's of all provided parameters (used by invoke())\n   */\n  query() {\n    const _this = this;\n    return new Promise((resolve, reject) => {\n      let workingQuery = {};\n      const missing = [];\n\n      Object.keys(_this.params).forEach((param) => {\n        const { value, name, list } = _this.params[param];\n        const complex = _this.params[param].type === 'Complex';\n\n        if ((value === undefined || value === null)) {\n          if (_this.params[param].required === true) {\n            missing.push(name);\n          }\n          return;\n        }\n\n        if (complex) {\n          workingQuery = value.appendTo(workingQuery);\n        } else if (list) {\n          Object.keys(value).forEach((valueParam) => {\n            workingQuery[valueParam] = value[valueParam];\n          });\n        } else {\n          workingQuery[name] = value;\n        }\n      });\n\n      if (missing.length > 0) {\n        reject(new Error(`ERROR: Missing required parameter(s): ${missing.join(',')}!`));\n      } else {\n        resolve(workingQuery);\n      }\n    });\n  }\n}\n","\n/**\n * Contructor for objects used to represent enumeration states. Useful\n * when you need to make programmatic updates to an enumerated data type or\n * wish to encapsulate enum states in a handy, re-usable variable.\n *\n * @param {Array} choices An array of any possible values (choices)\n */\nexport default class EnumType {\n  constructor(choices) {\n    Object.keys(choices).forEach((key) => {\n      this[choices[key]] = false;\n    });\n\n    this._choices = choices;\n  }\n\n  /**\n   * Enable one or more choices (accepts a variable number of arguments)\n   * @return {Object} Current instance of EnumType for chaining\n   */\n  enable(...args) {\n    Object.keys(args).forEach((key) => {\n      this[args[key]] = true;\n    });\n    return this;\n  }\n\n  /**\n   * Disable one or more choices (accepts a variable number of arguments)\n   * @return {Object} Current instance of EnumType for chaining\n   */\n  disable(...args) {\n    Object.keys(args).forEach((key) => {\n      this[args[key]] = false;\n    });\n    return this;\n  }\n\n  /**\n   * Toggles one or more choices (accepts a variable number of arguments)\n   * @return {Object} Current instance of EnumType for chaining\n   */\n  toggle(...args) {\n    Object.keys(args).forEach((key) => {\n      this[args[key]] = !this[args[key]];\n    });\n    return this;\n  }\n\n  /**\n   * Return all possible values without regard to current state\n   * @return {Array} Choices passed to EnumType constructor\n   */\n  all() {\n    return this._choices;\n  }\n\n  /**\n   * Return all enabled choices as an array (used to set list params, usually)\n   * @return {Array} Choice values for each choice set to true\n   */\n  values() {\n    return Object.keys(this._choices)\n      .filter(choice => this[this._choices[choice]] === true)\n      .map(choice => this._choices[choice]);\n  }\n}\n\n","/**\n * Complex List helper object. Once initialized, you should set\n * an add(args) method which pushes a new complex object to members.\n *\n * @param {String} name Name of Complex Type (including .member or subtype)\n */\nexport default class ComplexListType {\n  constructor(name) {\n    this.pre = name;\n    this.members = [];\n  }\n\n  /**\n   * Appends each member object as a complex list item\n   * @param  {Object} query Query object to append to\n   * @return {Object}       query\n   */\n  appendTo(query) {\n    const workingQuery = { ...query };\n\n    this.members.forEach((member, idx) => {\n      Object.keys(member).forEach((key) => {\n        workingQuery[`${this.pre}.${idx + 1}.${key}`] = member[key];\n      });\n    });\n\n    return workingQuery;\n  }\n}\n","import qs from 'querystring';\nimport crypto from 'crypto';\nimport xml2js from 'xml2js';\nimport request from 'request';\nimport tls from 'tls';\n\n/**\n * Constructor for the main MWS client interface used to make api calls and\n * various data structures to encapsulate MWS requests, definitions, etc.\n *\n * @param {String} accessKeyId     Id for your secret Access Key (required)\n * @param {String} secretAccessKey Secret Access Key provided by Amazon (required)\n * @param {String} merchantId      Aka SellerId, provided by Amazon (required)\n * @param {Object} options         Additional configuration options for this instance\n */\nexport default class AmazonMwsClient {\n  constructor(accessKeyId, secretAccessKey, merchantId, {\n    host = 'mws.amazonservices.com',\n    appName = 'mws-js',\n    appVersion = '0.1.0',\n    appLanguage = 'JavaScript',\n    authToken,\n    explicitArray = true,\n    creds = {},\n  } = {}) {\n    this.accessKeyId = accessKeyId;\n    this.secretAccessKey = secretAccessKey;\n    this.merchantId = merchantId;\n\n    this.host = host;\n    this.appName = appName;\n    this.appVersion = appVersion;\n    this.appLanguage = appLanguage;\n    this.authToken = authToken;\n    this.explicitArray = explicitArray;\n\n    const createCredentials = tls.createSecureContext || crypto.createCredentials;\n    this.creds = createCredentials(creds);\n  }\n\n  /**\n   * The method used to invoke calls against MWS Endpoints. Recommended usage is\n   * through the invoke wrapper method when the api call you're invoking has a\n   * request defined in one of the submodules. However, you can use call() manually\n   * when a lower level of control is necessary (custom or new requests, for example).\n   *\n   * @param  {Object}   api      Settings object unique to each API submodule\n   * @param  {String}   action   Api `Action`, such as GetServiceStatus or GetOrder\n   * @param  {Object}   query    Any parameters belonging to the current action\n   * @return Promise\n   */\n  call(api, action, query) {\n    let workingQuery = { ...query };\n    if (this.secretAccessKey == null || this.accessKeyId == null || this.merchantId == null) {\n      throw new Error('accessKeyId, secretAccessKey, and merchantId must be set');\n    }\n\n    const requestOpts = {\n      method: 'POST',\n      uri: `https://${this.host}${api.path}`,\n    };\n\n    // Check if we're dealing with a file (such as a feed) upload\n    if (api.upload) {\n      requestOpts.body = workingQuery._BODY_;\n      workingQuery._FORMAT_ = 'application/x-www-form-urlencoded';\n      requestOpts.headers = {\n        'Content-Type': workingQuery._FORMAT_,\n        'Content-MD5': crypto.createHash('md5').update(workingQuery._BODY_).digest('base64'),\n      };\n      delete workingQuery._BODY_;\n      delete workingQuery._FORMAT_;\n    }\n\n    // Add required parameters and sign the query\n    workingQuery.Action = action;\n    workingQuery.Version = api.version;\n    workingQuery.Timestamp = new Date().toISOString();\n    workingQuery.AWSAccessKeyId = this.accessKeyId;\n\n    if (this.authToken) {\n      workingQuery.MWSAuthToken = this.authToken;\n    }\n\n    if (api.legacy) {\n      workingQuery.Merchant = this.merchantId;\n    } else {\n      workingQuery.SellerId = this.merchantId;\n    }\n\n    workingQuery = this.sign(api.path, workingQuery, this.host);\n\n    if (!api.upload) {\n      requestOpts.form = workingQuery;\n    } else {\n      requestOpts.qs = workingQuery;\n    }\n\n    return new Promise((resolve, reject) => {\n      request(requestOpts, (err, response, data) => {\n        if (err) {\n          reject(err);\n        } else if (data.slice(0, 5) === '<?xml') {\n          const parser = new xml2js.Parser({ explicitArray: this.explicitArray });\n          parser.parseString(data, (parseErr, result) => {\n            // Throw an error if there was a problem reported\n            if (parseErr != null) {\n              reject(new Error(`${parseErr.Code}: ${parseErr.Message}`));\n            } else {\n              resolve(result);\n            }\n          });\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Calculates the HmacSHA256 signature and appends it with additional signature\n   * parameters to the provided query object.\n   *\n   * @param  {String} path  Path of API call (used to build the string to sign)\n   * @param  {Object} query Any non-signature parameters that will be sent\n   * @return {Object}       Finalized object used to build query string of request\n   */\n  sign(path, query, host) {\n    const workingQuery = query;\n    // Configure the query signature method/version\n    workingQuery.SignatureMethod = 'HmacSHA256';\n    workingQuery.SignatureVersion = '2';\n\n    // Copy query keys, sort them, then copy over the values\n    const sorted = Object.keys(workingQuery)\n      .sort()\n      .reduce((acc, key) => {\n        acc[key] = workingQuery[key];\n        return acc;\n      }, {});\n\n    const stringToSign = ['POST', host, path, qs.stringify(sorted)].join('\\n');\n\n    workingQuery.Signature = crypto.createHmac('sha256', this.secretAccessKey).update(stringToSign, 'utf8').digest('base64');\n\n    return workingQuery;\n  }\n\n  /**\n   * Suggested method for invoking a pre-defined mws request object.\n   *\n   * @param  {Object}   request  An instance of AmazonMwsRequest with params, etc.\n   * @return Promise\n   */\n  invoke(req) {\n    const _this = this;\n    return req.query().then(q => _this.call(req.api, req.action, q));\n  }\n}\n","/**\n * Fulfillment API requests and definitions for Amazon's MWS web services.\n * Currently untested, for the most part because I don't have an account\n * with Fulfillment By Amazon services.\n *\n * @author Robert Saunders\n */\nimport AmazonMwsRequest from './AmazonMwsRequest';\nimport EnumType from './EnumType';\nimport ComplexListType from './ComplexListType';\n\n/**\n * Construct a mws fulfillment api request for mws.Client.invoke()\n * @param {String} group  Group name (category) of request\n * @param {String} path   Path of associated group\n * @param {String} action Action request will be calling\n * @param {Object} params Schema of possible request parameters\n */\nexport default class FulfillmentRequest extends AmazonMwsRequest {\n  constructor(group, path, action, params) {\n    const opts = {\n      name: 'Fulfillment',\n      group,\n      path,\n      version: '2010-10-01',\n      legacy: false,\n      action,\n      params,\n    };\n    super(opts);\n  }\n}\n\nfunction FbaInboundRequest(action, params) {\n  return new FulfillmentRequest('Inbound Shipments', '/FulfillmentInboundShipment/2010-10-01', action, params);\n}\n\nfunction FbaInventoryRequest(action, params) {\n  return new FulfillmentRequest('Inventory', '/FulfillmentInventory/2010-10-01', action, params);\n}\n\nfunction FbaOutboundRequest(action, params) {\n  return new FulfillmentRequest('Outbound Shipments', '/FulfillmentOutboundShipment/2010-10-01', action, params);\n}\n\n/**\n * Initialize and create an add function for ComplexList parameters. You can create your\n * own custom complex parameters by making an object with an appendTo function that takes\n * an object as input and directly sets all of the associated values manually.\n *\n * @type {Object}\n */\nexport const complex = {\n\n  /**\n   * Complex List used for CreateInboundShipment & UpdateInboundShipment requests\n   */\n  InboundShipmentItems() {\n    const obj = new ComplexListType('InboundShipmentItems.member');\n    obj.add = (quantityShipped, sellerSku) => {\n      obj.members.push({ QuantityShipped: quantityShipped, SellerSKU: sellerSku });\n      return obj;\n    };\n    return obj;\n  },\n\n  /**\n   * Complex List used for CreateInboundShipmentPlan request\n   */\n  InboundShipmentPlanRequestItems() {\n    const obj = new ComplexListType('InboundShipmentPlanRequestItems.member');\n    obj.add = (sellerSku, asin, quantity, condition) => {\n      obj.members.push({\n        SellerSKU: sellerSku,\n        ASIN: asin,\n        Quantity: quantity,\n        Condition: condition,\n      });\n      return obj;\n    };\n    return obj;\n  },\n\n  /**\n   * The mac-daddy of ComplexListTypes... Used for CreateFulfillmentOrder request\n   */\n  CreateLineItems() {\n    const obj = new ComplexListType('Items.member');\n    obj.add = (\n      comment,\n      giftMessage,\n      decUnitValue,\n      decValueCurrency,\n      quantity,\n      orderItemId,\n      sellerSku,\n    ) => {\n      obj.members.push({\n        DisplayableComment: comment,\n        GiftMessage: giftMessage,\n        'PerUnitDeclaredValue.Value': decUnitValue,\n        'PerUnitDeclaredValue.CurrencyCode': decValueCurrency,\n        Quantity: quantity,\n        SellerFulfillmentOrderItemId: orderItemId,\n        SellerSKU: sellerSku,\n      });\n      return obj;\n    };\n    return obj;\n  },\n\n  /**\n   * The step child of above, used for GetFulfillmentPreview\n   */\n  PreviewLineItems() {\n    const obj = new ComplexListType('Items.member');\n    obj.add = (quantity, orderItemId, sellerSku, estShipWeight, weightCalcMethod) => {\n      obj.members.push({\n        Quantity: quantity,\n        SellerFulfillmentOrderItemId: orderItemId,\n        SellerSKU: sellerSku,\n        EstimatedShippingWeight: estShipWeight,\n        ShippingWeightCalculationMethod: weightCalcMethod,\n      });\n      return obj;\n    };\n    return obj;\n  },\n\n};\n\n/**\n * Ojects to represent enum collections used by some request(s)\n * @type {Object}\n */\nexport const enums = {\n\n  ResponseGroups() {\n    return new EnumType(['Basic', 'Detailed']);\n  },\n\n  ShippingSpeedCategories() {\n    return new EnumType(['Standard', 'Expedited', 'Priority']);\n  },\n\n  FulfillmentPolicies() {\n    return new EnumType(['FillOrKill', 'FillAll', 'FillAllAvailable']);\n  },\n\n};\n\n/**\n * A collection of currently supported request constructors. Once created and\n * configured, the returned requests can be passed to an mws client `invoke` call\n * @type {Object}\n */\nexport const requests = {\n\n  // Inbound Shipments\n  inbound: {\n\n    GetServiceStatus() {\n      return new FbaInboundRequest('GetServiceStatus', {});\n    },\n\n    CreateInboundShipment() {\n      return new FbaInboundRequest('CreateInboundShipment', {\n        ShipmentId: { name: 'ShipmentId', required: true },\n        Shipmentname: { name: 'InboundShipmentHeader.ShipmentName', required: true },\n        ShipFromName: { name: 'InboundShipmentHeader.ShipFromAddress.Name', required: true },\n        ShipFromAddressLine1: { name: 'InboundShipmentHeader.ShipFromAddress.AddressLine1', required: true },\n        ShipFromAddressLine2: { name: 'InboundShipmentHeader.ShipFromAddress.AddressLine2', required: false },\n        ShipFromAddressCity: { name: 'InboundShipmentHeader.ShipFromAddress.City', required: true },\n        ShipFromDistrictOrCounty: { name: 'InboundShipmentHeader.ShipFromAddress.DistrictOrCounty', required: false },\n        ShipFromStateOrProvince: { name: 'InboundShipmentHeader.ShipFromAddress.StateOrProvinceCode', required: true },\n        ShipFromPostalCode: { name: 'InboundShipmentHeader.ShipFromAddress.PostalCode', required: true },\n        ShipFromCountryCode: { name: 'InboundShipmentHeader.ShipFromAddress.CountryCode', required: true },\n        DestinationFulfillmentCenterId: { name: 'InboundShipmentHeader.DestinationFulfillmentCenterId', required: true },\n        AreCasesRequired: { name: 'InboundShipmentHeader.AreCasesRequired', required: false },\n        ShipmentStatus: { name: 'InboundShipmentHeader.ShipmentStatus', required: true },\n        IntendedBoxContentsSource: { name: 'InboundShipmentHeader.IntendedBoxContentsSource', required: false },\n        LabelPrepPreference: { name: 'InboundShipmentHeader.LabelPrepPreference' },\n        InboundShipmentItems: {\n          name: 'InboundShipmentItems',\n          type: 'Complex',\n          required: true,\n          construct: complex.InboundShipmentItems,\n        },\n      });\n    },\n\n    CreateInboundShipmentPlan() {\n      return new FbaInboundRequest('CreateInboundShipmentPlan', {\n        LabelPrepPreference: { name: 'LabelPrepPreference', required: true },\n        ShipFromName: { name: 'ShipFromAddress.Name' },\n        ShipFromAddressLine1: { name: 'ShipFromAddress.AddressLine1' },\n        ShipFromCity: { name: 'ShipFromAddress.City' },\n        ShipFromStateOrProvince: { name: 'ShipFromAddress.StateOrProvinceCode' },\n        ShipFromPostalCode: { name: 'ShipFromAddress.PostalCode' },\n        ShipFromCountryCode: { name: 'ShipFromAddress.CountryCode' },\n        ShipFromAddressLine2: { name: 'ShipFromAddress.AddressLine2' },\n        ShipFromDistrictOrCounty: { name: 'ShipFromAddress.DistrictOrCounty' },\n        InboundShipmentPlanRequestItems: {\n          name: 'InboundShipmentPlanRequestItems',\n          type: 'Complex',\n          required: true,\n          construct: complex.InboundShipmentPlanRequestItems,\n        },\n      });\n    },\n\n    ListInboundShipmentItems() {\n      return new FbaInboundRequest('ListInboundShipmentItems', {\n        ShipmentId: { name: 'ShipmentId', required: true },\n        LastUpdatedAfter: { name: 'LastUpdatedAfter', type: 'Timestamp' },\n        LastUpdatedBefore: { name: 'LastUpdatedBefore', type: 'Timestamp' },\n      });\n    },\n\n    ListInboundShipmentItemsByNextToken() {\n      return new FbaInboundRequest('ListInboundShipmentItemsByNextToken', {\n        NextToken: { name: 'NextToken', required: true },\n      });\n    },\n\n    ListInboundShipments() {\n      return new FbaInboundRequest('ListInboundShipments', {\n        ShipmentStatuses: { name: 'ShipmentStatusList.member', list: true, required: false },\n        ShipmentIds: { name: 'ShipmentIdList.member', list: true, required: false },\n        LastUpdatedAfter: { name: 'LastUpdatedAfter', type: 'Timestamp' },\n        LastUpdatedBefore: { name: 'LastUpdatedBefore', type: 'Timestamp' },\n      });\n    },\n\n    ListInboundShipmentsByNextToken() {\n      return new FbaInboundRequest('ListInboundShipmentsByNextToken', {\n        NextToken: { name: 'NextToken', required: true },\n      });\n    },\n\n    UpdateInboundShipment() {\n      return new FbaInboundRequest('UpdateInboundShipment', {\n        ShipmentId: { name: 'ShipmentId', required: true },\n        ShipmentName: { name: 'InboundShipmentHeader.ShipmentName', required: true },\n        ShipFromName: { name: 'InboundShipmentHeader.ShipFromAddress.Name', required: true },\n        ShipFromAddressLine1: { name: 'InboundShipmentHeader.ShipFromAddress.AddressLine1', required: true },\n        ShipFromAddressLine2: { name: 'InboundShipmentHeader.ShipFromAddress.AddressLine2', required: false },\n        ShipFromAddressCity: { name: 'InboundShipmentHeader.ShipFromAddress.City', required: true },\n        ShipFromDistrictOrCounty: { name: 'InboundShipmentHeader.ShipFromAddress.DistrictOrCounty', required: false },\n        ShipFromStateOrProvince: { name: 'InboundShipmentHeader.ShipFromAddress.StateOrProvinceCode', required: true },\n        ShipFromPostalCode: { name: 'InboundShipmentHeader.ShipFromAddress.PostalCode', required: true },\n        ShipFromCountryCode: { name: 'InboundShipmentHeader.ShipFromAddress.CountryCode', required: true },\n        DestinationFulfillmentCenterId: { name: 'InboundShipmentHeader.DestinationFulfillmentCenterId', required: true },\n        ShipmentStatus: { name: 'InboundShipmentHeader.ShipmentStatus' },\n        LabelPrepPreference: { name: 'InboundShipmentHeader.LabelPrepPreference' },\n        InboundShipmentItems: {\n          name: 'InboundShipmentItems',\n          type: 'Complex',\n          required: true,\n          construct: complex.InboundShipmentItems,\n        },\n      });\n    },\n\n  },\n\n  // Inventory\n  inventory: {\n\n    GetServiceStatus() {\n      return new FbaInventoryRequest('GetServiceStatus', {});\n    },\n\n    ListInventorySupply() {\n      return new FbaInventoryRequest('ListInventorySupply', {\n        SellerSkus: { name: 'SellerSkus.member', list: true },\n        QueryStartDateTime: { name: 'QueryStartDateTime', type: 'Timestamp' },\n        ResponseGroup: { name: 'ResponseGroup' },\n      });\n    },\n\n    ListInventorySupplyByNextToken() {\n      return new FbaInventoryRequest('ListInventorySupplyByNextToken', {\n        NextToken: { name: 'NextToken', required: true },\n      });\n    },\n\n  },\n\n  // Outbound Shipments\n  outbound: {\n\n    GetServiceStatus() {\n      return new FbaOutboundRequest('GetServiceStatus', {});\n    },\n\n    CancelFulfillmentOrder() {\n      return new FbaOutboundRequest('CancelFulfillmentOrder', {\n        SellerFulfillmentOrderId: { name: 'SellerFulfillmentOrderId', required: true },\n      });\n    },\n\n    CreateFulfillmentOrder() {\n      return new FbaOutboundRequest('CreateFulfillmentOrder', {\n        SellerFulfillmentOrderId: { name: 'SellerFulfillmentOrderId', required: true },\n        ShippingSpeedCategory: { name: 'ShippingSpeedCategory', required: true, type: 'fba.ShippingSpeedCategory' },\n        DisplayableOrderId: { name: 'DisplayableOrderId', required: true },\n        DisplayableOrderDateTime: { name: 'DisplayableOrderDateTime', type: 'Timestamp' },\n        DisplayableOrderComment: { name: 'DisplayableOrderComment' },\n        FulfillmentPolicy: { name: 'FulfillmentPolicy', required: false, type: 'fba.FulfillmentPolicy' },\n        FulfillmentMethod: { name: 'FulfillmentMethod', required: false },\n        NotificationEmails: { name: 'NotificationEmailList.member', required: false, list: true },\n        DestName: { name: 'DestinationAddress.Name' },\n        DestAddressLine1: { name: 'DestinationAddress.Line1' },\n        DestAddressLine2: { name: 'DestinationAddress.Line2' },\n        DestAddressLine3: { name: 'DestinationAddress.Line3' },\n        DestCity: { name: 'DestinationAddress.City' },\n        DestStateOrProvince: { name: 'DestinationAddress.StateOrProvinceCode' },\n        DestPostalCode: { name: 'DestinationAddress.PostalCode' },\n        DestCountryCode: { name: 'DestinationAddress.CountryCode' },\n        DestDistrictOrCounty: { name: 'DestinationAddress.DistrictOrCounty' },\n        DestPhoneNumber: { name: 'DestinationAddress.PhoneNumber' },\n        LineItems: { name: 'LineItems', type: 'Complex', required: true, construct: complex.CreateLineItems },\n      });\n    },\n\n    GetFulfillmentOrder() {\n      return new FbaOutboundRequest('GetFulfillmentOrder', {\n        SellerFulfillmentOrderId: { name: 'SellerFulfillmentOrderId', required: true },\n      });\n    },\n\n    GetFulfillmentPreview() {\n      return new FbaOutboundRequest('GetFulfillmentPreview', {\n        ToName: { name: 'Address.Name' },\n        ToAddressLine1: { name: 'Address.Line1' },\n        ToAddressLine2: { name: 'Address.Line2' },\n        ToAddressLine3: { name: 'Address.Line3' },\n        ToCity: { name: 'Address.City' },\n        ToStateOrProvince: { name: 'Address.StateOrProvinceCode' },\n        ToPostalCode: { name: 'Address.PostalCode' },\n        ToCountry: { name: 'Address.CountryCode' },\n        ToDistrictOrCounty: { name: 'Address.DistrictOrCounty' },\n        ToPhoneNumber: { name: 'Address.PhoneNumber' },\n        LineItems: { name: 'LineItems', type: 'Complex', required: true, construct: complex.PreviewLineItems },\n        ShippingSpeeds: { name: 'ShippingSpeedCategories.member', list: true, type: 'fba.ShippingSpeedCategory' },\n      });\n    },\n\n    ListAllFulfillmentOrders() {\n      return new FbaOutboundRequest('ListAllFulfillmentOrders', {\n        QueryStartDateTime: { name: 'QueryStartDateTime', required: true, type: 'Timestamp' },\n        FulfillentMethods: { name: 'FulfillmentMethod.member', list: true },\n      });\n    },\n\n    ListAllFulfillmentOrdersByNextToken() {\n      return new FbaOutboundRequest('ListAllFulfillmentOrdersByNextToken', {\n        NextToken: { name: 'NextToken', required: true },\n      });\n    },\n\n  },\n\n};\n","/**\n * Orders API requests and definitions for Amazon's MWS web services.\n * For information on using, please see examples folder.\n *\n * @author Robert Saunders\n */\nimport AmazonMwsRequest from './AmazonMwsRequest';\nimport EnumType from './EnumType';\n\n/**\n * Construct an Orders API request for mws.Client.invoke()\n *\n * @param {String} action Action parameter of request\n * @param {Object} params Schemas for all supported parameters\n */\nexport default class OrdersRequest extends AmazonMwsRequest {\n  constructor(action, params) {\n    const opts = {\n      name: 'Orders',\n      group: 'Order Retrieval',\n      path: '/Orders/2013-09-01',\n      version: '2013-09-01',\n      legacy: false,\n      action,\n      params,\n    };\n    super(opts);\n  }\n}\n\n/**\n * Ojects to represent enum collections used by some request(s)\n * @type {Object}\n */\nexport const enums = {\n\n  FulfillmentChannels() {\n    return new EnumType(['AFN', 'MFN']);\n  },\n\n  OrderStatuses() {\n    return new EnumType(['Pending', 'Unshipped', 'PartiallyShipped', 'Shipped', 'Canceled', 'Unfulfillable']);\n  },\n\n  PaymentMethods() {\n    return new EnumType(['COD', 'CVS', 'Other']);\n  },\n\n};\n\n/**\n * Contains brief definitions for unique data type values.\n * Can be used to explain input/output to users via tooltips, for example\n * @type {Object}\n */\nexport const types = {\n\n  FulfillmentChannel: {\n    AFN: 'Amazon Fulfillment Network',\n    MFN: 'Merchant\\'s Fulfillment Network',\n  },\n\n  OrderStatus: {\n    Pending: 'Order placed but payment not yet authorized. Not ready for shipment.',\n    Unshipped: 'Payment has been authorized. Order ready for shipment, but no items shipped yet. Implies PartiallyShipped.',\n    PartiallyShipped: 'One or more (but not all) items have been shipped. Implies Unshipped.',\n    Shipped: 'All items in the order have been shipped.',\n    Canceled: 'The order was canceled.',\n    Unfulfillable: 'The order cannot be fulfilled. Applies only to Amazon-fulfilled orders not placed on Amazon.',\n  },\n\n  PaymentMethod: {\n    COD: 'Cash on delivery',\n    CVS: 'Convenience store payment',\n    Other: 'Any payment method other than COD or CVS',\n  },\n\n  ServiceStatus: {\n    GREEN: 'The service is operating normally.',\n    GREEN_I: 'The service is operating normally + additional info provided',\n    YELLOW: 'The service is experiencing higher than normal error rates or degraded performance.',\n    RED: 'The service is unabailable or experiencing extremely high error rates.',\n  },\n\n  ShipServiceLevelCategory: {\n    Expedited: 'Expedited shipping',\n    NextDay: 'Overnight shipping',\n    SecondDay: 'Second-day shipping',\n    Standard: 'Standard shipping',\n  },\n\n};\n\n/**\n * A collection of currently supported request constructors. Once created and\n * configured, the returned requests can be passed to an mws client `invoke` call\n * @type {Object}\n */\nexport const requests = {\n\n  /**\n   * Requests the operational status of the Orders API section.\n   */\n  GetServiceStatus() {\n    return new OrdersRequest('GetServiceStatus', {});\n  },\n\n  /**\n   * Returns orders created or updated during a time frame you specify.\n   */\n  ListOrders() {\n    return new OrdersRequest('ListOrders', {\n      CreatedAfter: { name: 'CreatedAfter', type: 'Timestamp' },\n      CreatedBefore: { name: 'CreatedBefore', type: 'Timestamp' },\n      LastUpdatedAfter: { name: 'LastUpdatedAfter', type: 'Timestamp' },\n      MarketplaceId: { name: 'MarketplaceId.Id', list: true, required: true },\n      LastUpdatedBefore: { name: 'LastUpdatedBefore', type: 'Timestamp' },\n      OrderStatus: { name: 'OrderStatus.Status', type: 'orders.OrderStatuses', list: true },\n      FulfillmentChannel: { name: 'FulfillmentChannel.Channel', type: 'orders.FulfillmentChannels', list: true },\n      PaymentMethod: { name: 'PaymentMethod.Method', type: 'orders.PaymentMethods', list: true },\n      BuyerEmail: { name: 'BuyerEmail' },\n      SellerOrderId: { name: 'SellerOrderId' },\n      MaxResultsPerPage: { name: 'MaxResultsPerPage' },\n    });\n  },\n\n  /**\n   * Returns the next page of orders using the NextToken parameter.\n   */\n  ListOrdersByNextToken() {\n    return new OrdersRequest('ListOrdersByNextToken', {\n      NextToken: { name: 'NextToken', required: true },\n    });\n  },\n\n  /**\n   * Returns orders based on the AmazonOrderId values that you specify.\n   */\n  GetOrder() {\n    return new OrdersRequest('GetOrder', {\n      AmazonOrderId: { name: 'AmazonOrderId.Id', required: true, list: true },\n    });\n  },\n\n  /**\n   * Returns order items based on the AmazonOrderId that you specify.\n   */\n  ListOrderItems() {\n    return new OrdersRequest('ListOrderItems', {\n      AmazonOrderId: { name: 'AmazonOrderId', required: true },\n    });\n  },\n\n  /**\n   * Returns the next page of order items using the NextToken parameter.\n   */\n  ListOrderItemsByNextToken() {\n    return new OrdersRequest('ListOrderItemsByNextToken', {\n      NextToken: { name: 'NextToken', required: true },\n    });\n  },\n\n};\n","/**\n * Sellers API requests and definitions for Amazon's MWS web services.\n * For information on using, please see examples folder.\n *\n * @author Robert Saunders\n */\nimport AmazonMwsRequest from './AmazonMwsRequest';\n\n/**\n * Construct a Sellers API request for mws.Client.invoke()\n *\n * @param {String} action Action parameter of request\n * @param {Object} params Schemas for all supported parameters\n */\nexport default class SellersRequest extends AmazonMwsRequest {\n  constructor(action, params) {\n    const opts = {\n      name: 'Sellers',\n      group: 'Sellers Retrieval',\n      path: '/Sellers/2011-07-01',\n      version: '2011-07-01',\n      legacy: false,\n      action,\n      params,\n    };\n    super(opts);\n  }\n}\n\n/**\n * Contains brief definitions for unique data type values.\n * Can be used to explain input/output to users via tooltips, for example\n * @type {Object}\n */\nexport const types = {\n\n  ServiceStatus: {\n    GREEN: 'The service is operating normally.',\n    GREEN_I: 'The service is operating normally + additional info provided',\n    YELLOW: 'The service is experiencing higher than normal error rates or degraded performance.',\n    RED: 'The service is unabailable or experiencing extremely high error rates.',\n  },\n\n};\n\n/**\n * A collection of currently supported request constructors. Once created and\n * configured, the returned requests can be passed to an mws client `invoke` call\n * @type {Object}\n */\nexport const requests = {\n\n  /**\n   * Requests the operational status of the Sellers API section.\n   */\n  GetServiceStatus() {\n    return new SellersRequest('GetServiceStatus', {});\n  },\n\n  ListMarketplaceParticipations() {\n    return new SellersRequest('ListMarketplaceParticipations', {});\n  },\n\n  ListMarketplaceParticipationsByNextToken() {\n    return new SellersRequest('ListMarketplaceParticipationsByNextToken', {\n      NextToken: { name: 'NextToken', required: true },\n    });\n  },\n\n};\n","/**\n * Feeds API requests and definitions for Amazon's MWS web services.\n * For information on using, please see examples folder.\n *\n * @author Robert Saunders\n */\nimport AmazonMwsRequest from './AmazonMwsRequest';\nimport EnumType from './EnumType';\n\n/**\n * Construct a Feeds API request for mws.Client.invoke()\n *\n * @param {String} action Action parameter of request\n * @param {Object} params Schemas for all supported parameters\n * @param {Boolean} isUpload Flag denoting upload\n */\nexport default class FeedsRequest extends AmazonMwsRequest {\n  constructor(action, params, isUpload) {\n    const opts = {\n      name: 'Feeds',\n      group: 'Feeds',\n      path: '/',\n      upload: isUpload,\n      version: '2009-01-01',\n      legacy: true,\n      action,\n      // This next field is the just the SPECIFICATION (schema) of the parameters.\n      // There are no VALUES for these parameters yet.\n      params,\n    };\n    super(opts);\n  }\n}\n\n/**\n * Objects to represent enum collections used by some request(s)\n * @type {Object}\n */\nexport const enums = {\n\n  FeedProcessingStatuses() {\n    return new EnumType(['_SUBMITTED_', '_IN_PROGRESS_', '_CANCELLED_', '_DONE_']);\n  },\n\n  FeedTypes() {\n    return new EnumType([\n      '_POST_PRODUCT_DATA_', '_POST_PRODUCT_RELATIONSHIP_DATA_', '_POST_ITEM_DATA_', '_POST_PRODUCT_OVERRIDES_DATA_', '_POST_PRODUCT_IMAGE_DATA_',\n      '_POST_PRODUCT_PRICING_DATA_', '_POST_INVENTORY_AVAILABILITY_DATA_', '_POST_ORDER_ACKNOWLEDGEMENT_DATA_', '_POST_ORDER_FULFILLMENT_DATA_',\n      '_POST_FULFILLMENT_ORDER_REQUEST_DATA_', '_POST_FULFILLMENT_ORDER_CANCELLATION', '_POST_PAYMENT_ADJUSTMENT_DATA_', '_POST_INVOICE_CONFIRMATION_DATA_',\n      '_POST_FLAT_FILE_LISTINGS_DATA_', '_POST_FLAT_FILE_ORDER_ACKNOWLEDGEMENT_DATA_', '_POST_FLAT_FILE_FULFILLMENT_DATA_',\n      '_POST_FLAT_FILE_FBA_CREATE_INBOUND_SHIPMENT_', '_POST_FLAT_FILE_FBA_UPDATE_INBOUND_SHIPMENT_', '_POST_FLAT_FILE_PAYMENT_ADJUSTMENT_DATA_',\n      '_POST_FLAT_FILE_INVOICE_CONFIRMATION_DATA_', '_POST_FLAT_FILE_INVLOADER_DATA_', '_POST_FLAT_FILE_CONVERGENCE_LISTINGS_DATA_',\n      '_POST_FLAT_FILE_BOOKLOADER_DATA_', '_POST_FLAT_FILE_LISTINGS_DATA_', '_POST_FLAT_FILE_PRICEANDQUANTITYONLY', '_POST_UIEE_BOOKLOADER_DATA_',\n    ]);\n  },\n\n};\n\n/**\n * A collection of currently supported request constructors. Once created and\n * configured, the returned requests can be passed to an mws client `invoke` call\n * @type {Object}\n */\nexport const requests = {\n\n  CancelFeedSubmissions() {\n    return new FeedsRequest('CancelFeedSubmissions', {\n      FeedSubmissionIds: { name: 'FeedSubmissionIdList.Id', list: true, required: false },\n      FeedTypes: { name: 'FeedTypeList.Type', list: true },\n      SubmittdFrom: { name: 'SubmittedFromDate', type: 'Timestamp' },\n      SubmittedTo: { name: 'SubmittedToDate', type: 'Timestamp' },\n    });\n  },\n\n  GetFeedSubmissionList() {\n    return new FeedsRequest('GetFeedSubmissionList', {\n      FeedSubmissionIds: { name: 'FeedSubmissionIdList.Id', list: true, required: false },\n      MaxCount: { name: 'MaxCount' },\n      FeedTypes: { name: 'FeedTypeList.Type', list: true },\n      FeedProcessingStatuses: { name: 'FeedProcessingStatusList.Status', list: true, type: 'bde.FeedProcessingStatuses' },\n      SubmittedFrom: { name: 'SubmittedFromDate', type: 'Timestamp' },\n      SubmittedTo: { name: 'SubmittedToDate', type: 'Timestamp' },\n    });\n  },\n\n  GetFeedSubmissionListByNextToken() {\n    return new FeedsRequest('GetFeedSubmissionListByNextToken', {\n      NextToken: { name: 'NextToken', required: true },\n    });\n  },\n\n  GetFeedSubmissionCount() {\n    return new FeedsRequest('GetFeedSubmissionCount', {\n      FeedTypes: { name: 'FeedTypeList.Type', list: true },\n      FeedProcessingStatuses: { name: 'FeedProcessingStatusList.Status', list: true, type: 'bde.FeedProcessingStatuses' },\n      SubmittedFrom: { name: 'SubmittedFromDate', type: 'Timestamp' },\n      SubmittedTo: { name: 'SubmittedToDate', type: 'Timestamp' },\n    });\n  },\n\n  GetFeedSubmissionResult() {\n    return new FeedsRequest('GetFeedSubmissionResult', {\n      FeedSubmissionId: { name: 'FeedSubmissionId', required: true },\n    });\n  },\n\n  SubmitFeed() {\n    return new FeedsRequest('SubmitFeed',\n      // schema:\n      {\n        FeedContents: { name: '_BODY_', required: true },\n        FeedType: { name: 'FeedType', required: true },\n        MarketplaceIds: { name: 'MarketplaceIdList.Id', list: true, required: false },\n        PurgeAndReplace: { name: 'PurgeAndReplace', required: false, type: 'Boolean' },\n      }, true);\n  },\n\n};\n","/**\n * Products API requests and definitions for Amazon's MWS web services.\n * For information on using, please see examples folder.\n *\n * @author Robert Saunders\n */\nimport AmazonMwsRequest from './AmazonMwsRequest';\nimport EnumType from './EnumType';\n\n/**\n * Construct a Products API request for using with mws.Client.invoke()\n *\n * @param {String} action Action parameter of request\n * @param {Object} params Schemas for all supported parameters\n */\nexport default class ProductsRequest extends AmazonMwsRequest {\n  constructor(action, params) {\n    const opts = {\n      name: 'Products',\n      group: 'Products',\n      path: '/Products/2011-10-01',\n      version: '2011-10-01',\n      legacy: false,\n      action,\n      params,\n    };\n    super(opts);\n  }\n}\n/**\n * Ojects to represent enum collections used by some request(s)\n * @type {Object}\n */\nexport const enums = {\n\n  ItemConditions() {\n    return new EnumType(['New', 'Used', 'Collectible', 'Refurbished', 'Club']);\n  },\n\n};\n\n/**\n * Contains brief definitions for unique data type values.\n * Can be used to explain input/output to users via tooltips, for example\n * @type {Object}\n */\nexport const types = {\n\n  CompetitivePriceId: {\n    1: 'New Buy Box Price',\n    2: 'Used Buy Box Price',\n  },\n\n  ServiceStatus: {\n    GREEN: 'The service is operating normally.',\n    GREEN_I: 'The service is operating normally + additional info provided',\n    YELLOW: 'The service is experiencing higher than normal error rates or degraded performance.',\n    RED: 'The service is unabailable or experiencing extremely high error rates.',\n  },\n\n};\n\n/**\n * A collection of currently supported request constructors. Once created and\n * configured, the returned requests can be passed to an mws client `invoke` call\n * @type {Object}\n */\nexport const requests = {\n\n  /**\n   * Requests the operational status of the Products API section.\n   */\n  GetServiceStatus() {\n    return new ProductsRequest('GetServiceStatus', {});\n  },\n\n  /**\n   * Returns a list of products and their attributes, ordered by relevancy,\n   * based on a search query that you specify\n   */\n  ListMatchingProducts() {\n    return new ProductsRequest('ListMatchingProducts', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      Query: { name: 'Query', required: true },\n      QueryContextId: { name: 'QueryContextId' },\n    });\n  },\n\n  /**\n   * Returns a list of products and their attributes,\n   * based on a list of ASIN values that you specify\n   */\n  GetMatchingProduct() {\n    return new ProductsRequest('GetMatchingProduct', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      ASINList: { name: 'ASINList.ASIN', list: true, required: true },\n    });\n  },\n\n  /**\n   * Returns a list of products and their attributes,\n   * based on a list of specified ID values that you specify\n   */\n  GetMatchingProductForId() {\n    return new ProductsRequest('GetMatchingProductForId', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      IdType: { name: 'IdType', required: true },\n      IdList: { name: 'IdList.Id', list: true, required: true },\n    });\n  },\n\n  /**\n   * Returns the current competitive pricing of a product,\n   * based on the SellerSKU and MarketplaceId that you specify\n   */\n  GetCompetitivePricingForSKU() {\n    return new ProductsRequest('GetCompetitivePricingForSKU', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      SellerSKUList: { name: 'SellerSKUList.SellerSKU', list: true, required: true },\n    });\n  },\n\n  /**\n   * Same as above, except that it uses a MarketplaceId and an ASIN to uniquely\n   * identify a product, and it does not return the SKUIdentifier element\n   */\n  GetCompetitivePricingForASIN() {\n    return new ProductsRequest('GetCompetitivePricingForASIN', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      ASINList: { name: 'ASINList.ASIN', list: true, required: true },\n    });\n  },\n\n  /**\n   * Returns the lowest price offer listings for a specific product by item condition.\n   */\n  GetLowestOfferListingsForSKU() {\n    return new ProductsRequest('GetLowestOfferListingsForSKU', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      ItemCondition: { name: 'ItemCondition' },\n      SellerSKUList: { name: 'SellerSKUList.SellerSKU', list: true, required: true },\n    });\n  },\n\n  /**\n   * Same as above but by a list of ASIN's you provide\n   */\n  GetLowestOfferListingsForASIN() {\n    return new ProductsRequest('GetLowestOfferListingsForASIN', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      ItemCondition: { name: 'ItemCondition' },\n      ASINList: { name: 'ASINList.ASIN', list: true, required: true },\n    });\n  },\n\n  /**\n   * Returns the product categories that a product belongs to,\n   * including parent categories back to the root for the marketplace\n   */\n  GetProductCategoriesForSKU() {\n    return new ProductsRequest('GetProductCategoriesForSKU', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      SellerSKU: { name: 'SellerSKU', required: true },\n    });\n  },\n\n  /**\n   * Same as above, except that it uses a MarketplaceId and an ASIN to\n   * uniquely identify a product.\n   */\n  GetProductCategoriesForASIN() {\n    return new ProductsRequest('GetProductCategoriesForASIN', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      ASIN: { name: 'ASIN', required: true },\n    });\n  },\n\n  /**\n   * Returns pricing information for your own offer listings, based on ASIN.\n   *\n   */\n  GetMyPriceForASIN() {\n    return new ProductsRequest('GetMyPriceForASIN', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      ASINList: { name: 'ASINList.ASIN', list: true, required: true },\n    });\n  },\n\n  /**\n   * Returns pricing information for your own offer listings,\n   * based on SellerSKU.\n   */\n  GetMyPriceForSKU() {\n    return new ProductsRequest('GetMyPriceForSKU', {\n      MarketplaceId: { name: 'MarketplaceId', required: true },\n      SellerSKUList: { name: 'SellerSKUList.SellerSKU', list: true, required: true },\n    });\n  },\n};\n","/**\n * Reports API requests and definitions for Amazon's MWS web services.\n * For information on using, please see examples folder.\n *\n * @author Robert Saunders\n */\nimport AmazonMwsRequest from './AmazonMwsRequest';\nimport EnumType from './EnumType';\n\n\n/**\n * Construct a Reports API request for mws.Client.invoke()\n *\n * @param {String} action Action parameter of request\n * @param {Object} params Schemas for all supported parameters\n */\nexport default class ReportsRequest extends AmazonMwsRequest {\n  constructor(action, params) {\n    const opts = {\n      name: 'Reports',\n      group: 'Reports & Report Scheduling',\n      path: '/',\n      version: '2009-01-01',\n      legacy: true,\n      action,\n      params,\n    };\n    super(opts);\n  }\n}\n\n/**\n * Ojects to represent enum collections used by some request(s)\n * @type {Object}\n */\nexport const enums = {\n\n  Schedules() {\n    return new EnumType(['_15_MINUTES_', '_30_MINUTES_', '_1_HOUR_', '_2_HOURS_', '_4_HOURS_', '_8_HOURS_', '_12_HOURS_', '_72_HOURS_', '_1_DAY_', '_2_DAYS_', '_7_DAYS_', '_14_DAYS_', '_15_DAYS_', '_30_DAYS_', '_NEVER_']);\n  },\n\n  ReportProcessingStatuses() {\n    return new EnumType(['_SUBMITTED_', '_IN_PROGRESS_', '_CANCELLED_', '_DONE_', '_DONE_NO_DATA_']);\n  },\n\n  ReportOptions() {\n    return new EnumType(['ShowSalesChannel=true']);\n  },\n\n};\n\n/**\n * A collection of currently supported request constructors. Once created and\n * configured, the returned requests can be passed to an mws client `invoke` call\n * @type {Object}\n */\nexport const requests = {\n\n  GetReport() {\n    return new ReportsRequest('GetReport', {\n      ReportId: { name: 'ReportId', required: true },\n    });\n  },\n\n  GetReportCount() {\n    return new ReportsRequest('GetReportCount', {\n      ReportTypeList: { name: 'ReportTypeList.Type', list: true },\n      Acknowledged: { name: 'Acknowledged', type: 'Boolean' },\n      AvailableFromDate: { name: 'AvailableFromDate', type: 'Timestamp' },\n      AvailableToDate: { name: 'AvailableToDate', type: 'Timestamp' },\n    });\n  },\n\n  GetReportList() {\n    return new ReportsRequest('GetReportList', {\n      MaxCount: { name: 'MaxCount' },\n      ReportTypeList: { name: 'ReportTypeList.Type', list: true },\n      Acknowledged: { name: 'Acknowledged', type: 'Boolean' },\n      AvailableFromDate: { name: 'AvailableFromDate', type: 'Timestamp' },\n      AvailableToDate: { name: 'AvailableToDate', type: 'Timestamp' },\n      ReportRequestIdList: { name: 'ReportRequestIdList.Id', list: true },\n    });\n  },\n\n  GetReportListByNextToken() {\n    return new ReportsRequest('GetReportListByNextToken', {\n      NextToken: { name: 'NextToken', required: true },\n    });\n  },\n\n  GetReportRequestCount() {\n    return new ReportsRequest('GetReportRequestCount', {\n      RequestedFromDate: { name: 'RequestedFromDate', type: 'Timestamp' },\n      RequestedToDate: { name: 'RequestedToDate', type: 'Timestamp' },\n      ReportTypeList: { name: 'ReportTypeList.Type', list: true },\n      ReportProcessingStatusList: {\n        name: 'ReportProcessingStatusList.Status',\n        list: true,\n        type: 'reports.ReportProcessingStatuses',\n      },\n    });\n  },\n\n  GetReportRequestList() {\n    return new ReportsRequest('GetReportRequestList', {\n      MaxCount: { name: 'MaxCount' },\n      RequestedFromDate: { name: 'RequestedFromDate', type: 'Timestamp' },\n      RequestedToDate: { name: 'RequestedToDate', type: 'Timestamp' },\n      ReportRequestIdList: { name: 'ReportRequestIdList.Id', list: true },\n      ReportTypeList: { name: 'ReportTypeList.Type', list: true },\n      ReportProcessingStatuses: {\n        name: 'ReportProcessingStatusList.Status',\n        list: true,\n        type: 'reports.ReportProcessingStatuses',\n      },\n    });\n  },\n\n  GetReportRequestListByNextToken() {\n    return new ReportsRequest('GetReportRequestListByNextToken', {\n      NextToken: { name: 'NextToken', required: true },\n    });\n  },\n\n  CancelReportRequests() {\n    return new ReportsRequest('CancelReportRequests', {\n      RequestedFromDate: { name: 'RequestedFromDate', type: 'Timestamp' },\n      RequestedToDate: { name: 'RequestedToDate', type: 'Timestamp' },\n      ReportRequestIdList: { name: 'ReportRequestIdList.Id', list: true },\n      ReportTypeList: { name: 'ReportTypeList.Type', list: true },\n      ReportProcessingStatusList: {\n        name: 'ReportProcessingStatusList.Status',\n        list: true,\n        type: 'reports.ReportProcessingStatuses',\n      },\n    });\n  },\n\n  RequestReport() {\n    return new ReportsRequest('RequestReport', {\n      ReportType: { name: 'ReportType', required: true },\n      MarketplaceIdList: { name: 'MarketplaceIdList.Id', list: true, required: false },\n      StartDate: { name: 'StartDate', type: 'Timestamp' },\n      EndDate: { name: 'EndDate', type: 'Timestamp' },\n      ReportOptions: { name: 'ReportOptions', type: 'reports.ReportOptions' },\n    });\n  },\n\n  ManageReportSchedule() {\n    return new ReportsRequest('ManageReportSchedule', {\n      ReportType: { name: 'ReportType', required: true },\n      Schedule: { name: 'Schedule', type: 'reports.Schedules', required: true },\n      ScheduleDate: { name: 'ScheduleDate', type: 'Timestamp' },\n    });\n  },\n\n  GetReportScheduleList() {\n    return new ReportsRequest('GetReportScheduleList', {\n      ReportTypeList: { name: 'ReportTypeList.Type', list: true },\n    });\n  },\n\n  GetReportScheduleListByNextToken() {\n    return new ReportsRequest('GetReportScheduleListByNextToken', {\n      NextToken: { name: 'NextToken', required: true },\n    });\n  },\n\n  GetReportScheduleCount() {\n    return new ReportsRequest('GetReportScheduleCount', {\n      ReportTypeList: { name: 'ReportTypeList.Type', list: true },\n    });\n  },\n\n  UpdateReportAcknowledgements() {\n    return new ReportsRequest('UpdateReportAcknowledgements', {\n      ReportIdList: { name: 'ReportIdList.Id', list: true, required: true },\n      Acknowledged: { name: 'Acknowledged', type: 'Boolean' },\n    });\n  },\n\n};\n","\n\nimport AmazonMwsRequest from './AmazonMwsRequest';\nimport EnumType from './EnumType';\nimport ComplexListType from './ComplexListType';\nimport AmazonMwsClient from './AmazonMwsClient';\n\nimport * as FulfillmentRequest from './FulfillmentRequest';\nimport * as OrdersRequest from './OrdersRequest';\nimport * as SellersRequest from './SellersRequest';\nimport * as FeedsRequest from './FeedsRequest';\nimport * as ProductsRequest from './ProductsRequest';\nimport * as ReportsRequest from './ReportsRequest';\n\nexports.Client = AmazonMwsClient;\nexports.Request = AmazonMwsRequest;\nexports.Enum = EnumType;\nexports.ComplexList = ComplexListType;\nexports.Fbs = FulfillmentRequest;\nexports.Orders = OrdersRequest;\nexports.Sellers = SellersRequest;\nexports.Feeds = FeedsRequest;\nexports.Products = ProductsRequest;\nexports.Reports = ReportsRequest;\n"],"names":["AmazonMwsRequest","path","version","legacy","upload","action","params","api","paramsMap","paramNames","Object","keys","length","forEach","paramName","realName","name","conf","key","set","param","value","undefined","setMultiple","prototype","hasOwnProperty","call","parameter","list","getListParameter","setValue","_this","Promise","resolve","reject","workingQuery","missing","complex","type","required","push","appendTo","valueParam","Error","join","workingParameter","i","setListValue","Array","isArray","normalizedValue","toISOString","EnumType","choices","_choices","args","filter","choice","map","ComplexListType","pre","members","query","member","idx","AmazonMwsClient","accessKeyId","secretAccessKey","merchantId","host","appName","appVersion","appLanguage","authToken","explicitArray","creds","createCredentials","tls","createSecureContext","crypto","requestOpts","body","_BODY_","_FORMAT_","headers","createHash","update","digest","Action","Version","Timestamp","Date","AWSAccessKeyId","MWSAuthToken","Merchant","SellerId","sign","form","qs","err","response","data","slice","parser","xml2js","Parser","parseString","parseErr","result","Code","Message","SignatureMethod","SignatureVersion","sorted","sort","reduce","acc","stringToSign","stringify","Signature","createHmac","req","then","q","FulfillmentRequest","group","opts","FbaInboundRequest","FbaInventoryRequest","FbaOutboundRequest","obj","add","quantityShipped","sellerSku","QuantityShipped","SellerSKU","asin","quantity","condition","comment","giftMessage","decUnitValue","decValueCurrency","orderItemId","estShipWeight","weightCalcMethod","enums","requests","InboundShipmentItems","InboundShipmentPlanRequestItems","construct","CreateLineItems","PreviewLineItems","OrdersRequest","types","SellersRequest","FeedsRequest","isUpload","ProductsRequest","ReportsRequest","exports","Client","Request","Enum","ComplexList","Fbs","Orders","Sellers","Feeds","Products","Reports"],"mappings":"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"}